
#Artificial Neural Networks (ANN)#
library(fBasics) 
library(neuralnet)
library(NeuralNetTools)

## Convert variables to numeric#
mydata$Y<-as.numeric(as.character(mydata$Y)) 
mydata$City<- as.numeric(mydata$City) 
mydata$Gender<- as.numeric(mydata$Gender) 
mydata$Residency<- as.numeric(mydata$Residency) 
mydata$C.P.<- as.numeric(mydata$C.P.)
mydata$Nutrition.H.<- as.numeric(mydata$Nutrition.H.) 
mydata$Solidfood<- as.numeric(mydata$Solidfood) 
mydata$I.S. <- as.numeric(mydata$I.S.)
mydata$F.TlD<-as.numeric(mydata$F.TlD) 
mydata$S.TlD<- as.numeric(mydata$S.TlD) 
mydata$M.TlD<- as.numeric(mydata$M.TlD) 
mydata$F.H.2nd<- as.numeric(mydata$F.H.2nd) 
mydata$P.L.<- as.numeric(mydata$P.L.) 
mydata$Delivery<- as.numeric(mydata$Delivery) 
mydata$Gest.Dia.<- as.numeric(mydata$Gest.Dia.)
mydata$B.Order<- as.numeric(mydata$B.Order)
mydata$Preeclampsia<- as.numeric(mydata$Preeclampsia) 
mydata$Asthma<- as.numeric(mydata$Asthma) 
mydata$Birth.Year<- as.numeric(mydata$Birth.Year)
mydata$Birth.Weight<- as.numeric(mydata$Birth.Weight) 
mydata$M.Age<- as.numeric(mydata$M.Age)

str(mydata)
# ANN with 1 hidden layer
# Splitting the data into the Training set and Test set
set.seed(277) 
ind<- sample(2, nrow(mydata),replace=TRUE, prob=c(0.7, 0.3))
train_and_validate<- mydata[ind==1, ] 
test<-mydata[ind==2,]
# Setup for cross validation
N_neurons<-10
N_cv<-10
threshold = 1.01
stepmax = 1000000
accuracy<- vector(length=N_neurons) 
for(i in 1:N_neurons) 
{
  print(paste0("NUMBER OF  HIDEEN NEURONS:",i))
  accuracy_cv<-vector(length=N_cv)
  for(j in 1:N_cv)
  {
    validate<-train_and_validate[sample(1:dim(train_and_validate)[1],0.2*dim(train_and_validate)[1]),] 
    train<-train_and_validate[!rownames(train_and_validate)%in%rownames(validate),]
    
    NN=neuralnet(Y~., data=train, hidden=i, threshold=threshold, 
                 stepmax=stepmax, linear.output=TRUE, act.fct="logistic")
    prediction<- neuralnet::compute(NN,validate[,c(1:16,18:21)])
    corrected_prediction<-round(prediction$net.result[,1])
    cm<-table(validate$Y,corrected_prediction) 
    accuracy_cv[j]<-tr(cm)/sum(cm)
  }
  accuracy[i]<- mean(accuracy_cv, na.rm=TRUE)
}
names(accuracy)<- seq(1:N_neurons) 
accuracy
plot(accuracy~seq(1:N_neurons), type='o',cex=1.3, col='black', cex.main= 1.3, cex.sub=1.3, cex.lab =1.3, cex.axis=1.3, font.main=1.0, font.sub =1.3,  font.axis=1.3, xlab="Number of Hidden Neurons", ylab="Accuracy", main="Cross-Validation Accuracy") 
#predicting results 
Predict=compute(NN, test[, c(1:16,18:21)]) 
Predict=compute(NN, test)
predl<- Predict$net.result
predl= ifelse(data.frame(predl)$predl> 0.5, 1, 0)
confusionMatrix(as.factor(predl), as.factor(test$Y), mode="everything", positive='1') 
# Area under Curve (AUC)
prfan<- ROCR::prediction(predl, test$Y)
aucan<- performance(prfan, "auc")
aucan<- unlist(slot(aucan, "y.values"))
aucan<- round(aucan, 4)
aucan
#Plot ROC for ANN with 1 hidden layer
rocan<- performance(prfan, "tpr", "fpr")
plot(rocan,
     colorize=T, cex=4.3, col='black',
     cex.main=1.3, cex.sub=4.3,
     cex.lab=1.3, cex.axis=4.3,
     font.main=4.3,
     font.sub=4.3,
     font.axis=4.3,
     main="ROC Curve of ANN with 1 hidden layer",
     ylab="Sensitivity",
     xlab="1-Specificity")
abline (a=0, b=1)
legend(.8, .2, aucan, title="AUC", cex= 1.0)

#Plot ANN
plot(NN)
plot(NN, col.hidden= 'gray',  col.hidden.synapse= 'black', show.weights=F,  information= F, fill= 'lightblue')


#ANN with two hidden layers 
# Splitting the data into the Training set and Test set
set.seed(277) 
ind<- sample(2, nrow(mydata),replace=TRUE, prob=c(0.7, 0.3))
train_and_validate<- mydata[ind==1, ] 
test<-mydata[ind==2,]
# Setup for cross validation
N_neurons<-10
N_cv<-10
number_of_hidden_layers=2
threshold = 1.01
stepmax = 1000
accuracy<- vector(length=N_neurons) 
for(i in 1:N_neurons) 
{
  print(paste0("NUMBER OF  NEURONS  IN  EACH  LAYER:",i))
  accuracy_cv<-vector(length=N_cv)
  for(j in 1:N_cv)
  {
    validate<-train_and_validate[sample(1:dim(train_and_validate)[1],0.2*dim(train_and_validate)[1]),] 
    train<-train_and_validate[!rownames(train_and_validate)%in%rownames(validate),]
    
    NN=neuralnet(Y~., data=train, hidden=rep(i, number_of_hidden_layers), threshold=threshold, 
                 stepmax=stepmax, linear.output=TRUE, act.fct="logistic")
    prediction<- neuralnet::compute(NN,validate[,c(1:16,18:21)])
    corrected_prediction<-round(prediction$net.result[,1])
    cm<-table(validate$Y,corrected_prediction) 
    accuracy_cv[j]<-tr(cm)/sum(cm)
  }
  accuracy[i]<- mean(accuracy_cv, na.rm=TRUE)
}
names(accuracy)<- seq(1:N_neurons) 
accuracy

plot(accuracy~seq(1:N_neurons), type='o',cex=1.3, col='black', cex.main= 1.3, cex.sub=1.3, cex.lab =1.3, cex.axis=1.3, font.main=1.0, font.sub =1.3,  font.axis=1.3, xlab="Number_of_Neurons_in_Each_Layer", ylab="Accuracy", main="Cross-Validation Accuracy") 

#predicting results 
Predict=compute(NN, test[, c(1:16,18:21)]) 
Predict=compute(NN, test)
predll<- Predict$net.result
predll= ifelse(data.frame(predll)$predll> 0.5, 1, 0)
confusionMatrix(as.factor(predll), as.factor(test$Y), mode="everything", positive='1') 
# Area under Curve (AUC)
prfan2<- ROCR::prediction(predll, test$Y)
aucan2<- performance(prfan2, "auc")
aucan2<- unlist(slot(aucan2, "y.values"))
aucan2<- round(aucan2, 4)
aucan2
#Plot ROC for ANN with 2 hidden layers
rocan2<- performance(prfan2, "tpr", "fpr")
plot(rocan2,
     colorize=T, cex=4.3, col='black',
     cex.main=1.3, cex.sub=4.3,
     cex.lab=1.3, cex.axis=4.3,
     font.main=4.3,
     font.sub=4.3,
     font.axis=4.3,
     main="ROC Curve of ANN",
     ylab="Sensitivity",
     xlab="1-Specificity")
abline (a=0, b=1)
legend(.8, .2, aucan2, title="AUC", cex= 1.0)

#Variables Importance using olden function 
olden(NN)

#ANN plot
plot(NN, col.hidden= 'gray',  col.hidden.synapse= 'black', show.weights=F,  information= F, fill= 'lightblue')


#Reduced Artificial Neural Networks (ANN with 2 hidden layers)#
str(mydata)
mydata5<- mydata[, c(1,3,5,6,8:11,13,17:19)]
str(mydata5)
# Splitting the data into the Training set and Test set
set.seed(111) 
ind<- sample(2, nrow(mydata5),replace=TRUE, prob=c(0.7, 0.3))
train_and_validate<- mydata5[ind==1, ] 
test<-mydata5[ind==2,]
# Setup for cross validation
N_neurons<-10
N_cv<-10
number_of_hidden_layers=2
threshold = 1.01
stepmax = 1000
accuracy<- vector(length=N_neurons) 
for(i in 1:N_neurons) 
{
  print(paste0("NUMBER OF  NEURONS  IN  EACH  LAYER:",i))
  accuracy_cv<-vector(length=N_cv)
  for(j in 1:N_cv)
  {
    validate<-train_and_validate[sample(1:dim(train_and_validate)[1],0.2*dim(train_and_validate)[1]),] 
    train<-train_and_validate[!rownames(train_and_validate)%in%rownames(validate),]
    
    NN=neuralnet(Y~., data=train, hidden=rep(i, number_of_hidden_layers), threshold=threshold, 
                 stepmax=stepmax, linear.output=TRUE, act.fct="logistic")
    prediction<- neuralnet::compute(NN,validate[,c(1:9,11,12)])
    corrected_prediction<-round(prediction$net.result[,1])
    cm<-table(validate$Y,corrected_prediction) 
    accuracy_cv[j]<-tr(cm)/sum(cm)
  }
  accuracy[i]<- mean(accuracy_cv, na.rm=TRUE)
}
names(accuracy)<- seq(1:N_neurons) 
accuracy
plot(accuracy~seq(1:N_neurons), type='o',cex=1.3, col='black', cex.main= 1.3, cex.sub=1.3, cex.lab =1.3, cex.axis=1.3, font.main=1.0, font.sub =1.3,  font.axis=1.3, xlab="Number_of_Neurons_in_Each_Layer", ylab="Accuracy", main="Cross-Validation Accuracy") 

#predicting results
Predict=compute(NN, test[, c(1:9,11,12)]) 
Predict=compute(NN, test)
predl<- Predict$net.result
predl= ifelse(data.frame(predl)$predl> 0.5, 1, 0)
confusionMatrix(as.factor(predl), as.factor(test$Y), mode="everything", positive='1') 
# Area under Curve (AUC)
prfanr<- ROCR::prediction(predl, test$Y)
aucanr<- performance(prfanr, "auc")
aucanr<- unlist(slot(aucanr, "y.values"))
aucanr<- round(aucanr, 4)
aucanr

#Plot ROC for Reduced(ANN with 2 hidden layers) 
rocanr<- performance(prfanr, "tpr", "fpr")
plot(rocanr,
     colorize=T, cex=4.3, col='black',
     cex.main=1.3, cex.sub=4.3,
     cex.lab=1.3, cex.axis=4.3,
     font.main=4.3,
     font.sub=4.3,
     font.axis=4.3,
     main="ROC Curve of Reduced ANN",
     ylab="Sensitivity",
     xlab="1-Specificity")
abline (a=0, b=1)
legend(.8, .2, aucanr, title="AUC", cex= 1.0)

###




